import collections

# The goal state for the 8-puzzle
GOAL_STATE = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def calculate_manhattan_distance(state):
   
    distance = 0
    goal_positions = {
        1: (0, 0), 2: (0, 1), 3: (0, 2),
        4: (1, 0), 5: (1, 1), 6: (1, 2),
        7: (2, 0), 8: (2, 1), 0: (2, 2)
    }
    for r in range(3):
        for c in range(3):
            tile = state[r][c]
            if tile != 0:
                goal_r, goal_c = goal_positions[tile]
                distance += abs(r - goal_r) + abs(c - goal_c)
    return distance

def get_blank_position(state):
    """Finds the (row, col) of the blank tile (0)."""
    for r in range(3):
        for c in range(3):
            if state[r][c] == 0:
                return r, c
    return None, None # Should not happen

def solve_puzzle(initial_state):

    print("## Initial State")
    for row in initial_state:
        print(row)
    initial_heuristic = calculate_manhattan_distance(initial_state)
    print(f"\Manhattan Distance for Initial State: {initial_heuristic}")
    print("-" * 30)
    print("## Explored States and Heuristics\n")

    # Queue for BFS: stores tuples of (state, path_to_state)
    queue = collections.deque([(initial_state, [])])
    
    # A set to keep track of visited states to avoid cycles.
    # We convert lists to tuples to make them hashable for the set.
    visited = {tuple(map(tuple, initial_state))}

    while queue:
        current_state, path = queue.popleft()

        # --- 2. Check for Goal ---
        if current_state == GOAL_STATE:
            return path

        # --- 3. Find Possible Moves ---
        blank_r, blank_c = get_blank_position(current_state)
        
        # Possible moves: (dr, dc, move_name)
        moves = [(-1, 0, 'up'), (1, 0, 'down'), (0, -1, 'left'), (0, 1, 'right')]

        for dr, dc, move in moves:
            new_r, new_c = blank_r + dr, blank_c + dc

            # Check if the move is within the grid boundaries
            if 0 <= new_r < 3 and 0 <= new_c < 3:
                # Create a new state by moving the blank tile
                new_state = [
                            [cell for cell in row]
                            for row in current_state
                            ]
                new_state[blank_r][blank_c], new_state[new_r][new_c] = new_state[new_r][new_c], new_state[blank_r][blank_c]
                
                new_state_tuple = tuple(map(tuple, new_state))

                # --- 4. Explore New State ---
                if new_state_tuple not in visited:
                    visited.add(new_state_tuple)
                    new_path = path + [move]
                    
                    # Display heuristic for the new explored state
                    h_value = calculate_manhattan_distance(new_state)
                    print(f"Move: {move}, Path: {new_path}, Heuristic: {h_value}")
                    for row in new_state:
                        print(row)
                    print()
                    
                    queue.append((new_state, new_path))
                    
    return None # No solution found

# --- Main Execution ---
if __name__ == "__main__":
    # Input: Initial state of the puzzle
    initial_state = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]

    solution_path = solve_puzzle(initial_state)

    print("-" * 30)
    if solution_path:
        print("## Optimal Solution Found! ")
        print(f"Sequence of moves: {solution_path}")
        print(f"Total moves: {len(solution_path)}")
    else:
        print("No solution found for the given initial state. ")